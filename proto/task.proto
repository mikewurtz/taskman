syntax = "proto3";

option go_package = "proto/";

import "google/protobuf/timestamp.proto";

package task_manager;

// TaskManager is a service that exposes APIs to manage linux processes (tasks)
service TaskManager {
    // StartTask takes a task and arguments and starts a new task
    rpc StartTask (StartTaskRequest) returns (StartTaskResponse);
    // StopTask stops a running task by task ID
    rpc StopTask (StopTaskRequest) returns (StopTaskResponse);
    // GetTaskStatus gets the status of a task by task ID
    rpc GetTaskStatus (TaskStatusRequest) returns (TaskStatusResponse);
    // StreamTaskOutput streams the output of a task by task ID
    rpc StreamTaskOutput (StreamTaskOutputRequest) returns (stream StreamTaskOutputResponse);
}
// JobStatus tracks status of job
enum JobStatus {
    // job is in an unknown error state
    JOB_STATUS_UNKNOWN = 0;
    // job is currently running
    JOB_STATUS_STARTED = 1;
    // job was stopped via a signal
    JOB_STATUS_SIGNALED = 2;
    // job completed and exited normally
    JOB_STATUS_EXITED_OK = 3;
    // job exited with a non-zero status and was not stopped
    JOB_STATUS_EXITED_ERROR = 4;
}
// StartTaskRequest contains the command and arguments to start a new task
message StartTaskRequest {
    // The command to execute, either a full path (e.g. "/bin/ls") or a binary available in the system's PATH.
    string command = 1;
    // arguments to pass to the task e.g. ["-l", "-a"]
    repeated string args = 2;
}
message StartTaskResponse {
    // UUID v4 ID of the task generated by the server
    string task_id = 1;
}
message StopTaskRequest {
    // UUID v4 ID of the task generated by the server
    string task_id = 1;
}
message StopTaskResponse {}
message TaskStatusRequest {
    // UUID v4 ID of the task generated by the server
    string task_id = 1;
}
message TaskStatusResponse {
    // UUID v4 ID of the task generated by the server
    string task_id = 1;
    // Exit code of the task; only set if task is not running
    optional int32 exit_code = 2;
    // PID of the process picked by the server
    string process_id = 3;
    // job status tracks status of job
    JobStatus status = 4;
    // type of signal used to kill process such as SIGTERM, SIGKILL;
    string termination_signal = 5;
    // user, system, oom, etc
    string termination_source = 6;
    // Timestamp when the task started
    google.protobuf.Timestamp start_time = 7;
    // Timestamp when the task ended; only set if task is not running
    google.protobuf.Timestamp end_time = 8;
}
message StreamTaskOutputRequest {
    // UUID v4 ID of the task generated by the server
    string task_id = 1;
}
// StreamTaskOutputResponse contains stdout and stderr output from the task
// Each output line is sent as a separate message
message StreamTaskOutputResponse {
    bytes output = 1;
}